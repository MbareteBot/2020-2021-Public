# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os, pickle

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1147, 575)
        MainWindow.setMinimumSize(QtCore.QSize(1147, 575))
        MainWindow.setMaximumSize(QtCore.QSize(1147, 575))
        MainWindow.setMouseTracking(True)
        MainWindow.setStyleSheet("background-color: rgb(57, 57, 57);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setMaximumSize(QtCore.QSize(1147, 580))
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.TopBar = QtWidgets.QFrame(self.centralwidget)
        self.TopBar.setMaximumSize(QtCore.QSize(16777215, 40))
        self.TopBar.setStyleSheet("background-color: #1C1D20;")
        self.TopBar.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.TopBar.setFrameShadow(QtWidgets.QFrame.Raised)
        self.TopBar.setLineWidth(0)
        self.TopBar.setObjectName("TopBar")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.TopBar)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.ToggleFrame = QtWidgets.QFrame(self.TopBar)
        self.ToggleFrame.setMaximumSize(QtCore.QSize(60, 16777215))
        self.ToggleFrame.setStyleSheet("")
        self.ToggleFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.ToggleFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.ToggleFrame.setObjectName("ToggleFrame")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.ToggleFrame)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.Btn_ToggleMenu = QtWidgets.QPushButton(self.ToggleFrame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Btn_ToggleMenu.sizePolicy().hasHeightForWidth())
        self.Btn_ToggleMenu.setSizePolicy(sizePolicy)
        self.Btn_ToggleMenu.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Btn_ToggleMenu.setStyleSheet("QPushButton {\n"
"    image: url(:/img/img/menu.png);\n"
"    border: 0px solid;\n"
"    color: white\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(70,70,70);\n"
"}")
        self.Btn_ToggleMenu.setText("")
        self.Btn_ToggleMenu.setIconSize(QtCore.QSize(16, 16))
        self.Btn_ToggleMenu.setDefault(False)
        self.Btn_ToggleMenu.setObjectName("Btn_ToggleMenu")
        self.verticalLayout_2.addWidget(self.Btn_ToggleMenu)
        self.horizontalLayout.addWidget(self.ToggleFrame)
        self.TitleBar = QtWidgets.QFrame(self.TopBar)
        self.TitleBar.setStyleSheet("background-color: rgb(30, 30, 30);")
        self.TitleBar.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.TitleBar.setFrameShadow(QtWidgets.QFrame.Raised)
        self.TitleBar.setObjectName("TitleBar")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.TitleBar)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setSpacing(0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.pushButton = QtWidgets.QPushButton(self.TitleBar)
        self.pushButton.setMinimumSize(QtCore.QSize(0, 40))
        self.pushButton.setMaximumSize(QtCore.QSize(40, 40))
        self.pushButton.setStyleSheet("border: 0px solid")
        self.pushButton.setText("")
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_5.addWidget(self.pushButton)
        self.horizontalLayout.addWidget(self.TitleBar, 0, QtCore.Qt.AlignRight)
        self.verticalLayout.addWidget(self.TopBar)
        self.MainFrame = QtWidgets.QFrame(self.centralwidget)
        self.MainFrame.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.MainFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.MainFrame.setObjectName("MainFrame")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.MainFrame)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.LeftBar = QtWidgets.QFrame(self.MainFrame)
        self.LeftBar.setMinimumSize(QtCore.QSize(60, 0))
        self.LeftBar.setMaximumSize(QtCore.QSize(60, 16777215))
        self.LeftBar.setStyleSheet("\n"
"background-color: rgb(28, 29, 32);")
        self.LeftBar.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.LeftBar.setFrameShadow(QtWidgets.QFrame.Raised)
        self.LeftBar.setLineWidth(0)
        self.LeftBar.setObjectName("LeftBar")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.LeftBar)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setSpacing(0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.Btn_LeftFrame = QtWidgets.QFrame(self.LeftBar)
        self.Btn_LeftFrame.setMinimumSize(QtCore.QSize(0, 0))
        self.Btn_LeftFrame.setStyleSheet("background-color: #1C1D20;")
        self.Btn_LeftFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Btn_LeftFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Btn_LeftFrame.setLineWidth(0)
        self.Btn_LeftFrame.setObjectName("Btn_LeftFrame")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.Btn_LeftFrame)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setSpacing(0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.Btn_pathCreator = QtWidgets.QPushButton(self.Btn_LeftFrame)
        self.Btn_pathCreator.setMinimumSize(QtCore.QSize(0, 40))
        self.Btn_pathCreator.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Btn_pathCreator.setStyleSheet("QPushButton {\n"
"    color: white;\n"
"    image: url(:/img/img/rayo.png);\n"
"    border: 0px solid;\n"
"    \n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(70, 70, 70);\n"
"}\n"
"")
        self.Btn_pathCreator.setText("")
        self.Btn_pathCreator.setObjectName("Btn_pathCreator")
        self.verticalLayout_4.addWidget(self.Btn_pathCreator)
        self.Btn_graphs = QtWidgets.QPushButton(self.Btn_LeftFrame)
        self.Btn_graphs.setMinimumSize(QtCore.QSize(0, 40))
        self.Btn_graphs.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Btn_graphs.setStyleSheet("QPushButton {\n"
"    image: url(:/img/img/grafico-circular.png);\n"
"    border: 0px solid;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(70, 70, 70);\n"
"}\n"
"")
        self.Btn_graphs.setText("")
        self.Btn_graphs.setObjectName("Btn_graphs")
        self.verticalLayout_4.addWidget(self.Btn_graphs)
        self.verticalLayout_3.addWidget(self.Btn_LeftFrame, 0, QtCore.Qt.AlignTop)
        self.Btn_settings = QtWidgets.QPushButton(self.LeftBar)
        self.Btn_settings.setMinimumSize(QtCore.QSize(0, 40))
        self.Btn_settings.setStyleSheet("QPushButton {\n"
"    color: white;\n"
"    image: url(:/img/img/configuraciones.png);\n"
"    border: 0px solid;\n"
"    \n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(70, 70, 70);\n"
"}\n"
"")
        self.Btn_settings.setText("")
        self.Btn_settings.setObjectName("Btn_settings")
        self.verticalLayout_3.addWidget(self.Btn_settings)
        self.horizontalLayout_2.addWidget(self.LeftBar)
        self.ContentFrame = QtWidgets.QFrame(self.MainFrame)
        self.ContentFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.ContentFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.ContentFrame.setObjectName("ContentFrame")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.ContentFrame)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setSpacing(0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.stackedWidget = QtWidgets.QStackedWidget(self.ContentFrame)
        self.stackedWidget.setObjectName("stackedWidget")
        self.Frame_matDesigner = QtWidgets.QWidget()
        self.Frame_matDesigner.setObjectName("Frame_matDesigner")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.Frame_matDesigner)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setSpacing(0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.configBar = QtWidgets.QFrame(self.Frame_matDesigner)
        self.configBar.setMinimumSize(QtCore.QSize(0, 50))
        self.configBar.setMaximumSize(QtCore.QSize(16777215, 50))
        self.configBar.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.configBar.setFrameShadow(QtWidgets.QFrame.Raised)
        self.configBar.setObjectName("configBar")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.configBar)
        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_7.setSpacing(0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.Btn_square = QtWidgets.QPushButton(self.configBar)
        self.Btn_square.setMinimumSize(QtCore.QSize(40, 40))
        self.Btn_square.setMaximumSize(QtCore.QSize(40, 16777215))
        self.Btn_square.setStyleSheet("image: url(:/img/img/dotted-square.png);")
        self.Btn_square.setText("")
        self.Btn_square.setObjectName("Btn_square")
        self.horizontalLayout_7.addWidget(self.Btn_square)
        self.Btn_straightLine = QtWidgets.QPushButton(self.configBar)
        self.Btn_straightLine.setMinimumSize(QtCore.QSize(40, 40))
        self.Btn_straightLine.setMaximumSize(QtCore.QSize(40, 16777215))
        self.Btn_straightLine.setStyleSheet("image: url(:/img/img/pair-of-lollipops.png);")
        self.Btn_straightLine.setText("")
        self.Btn_straightLine.setObjectName("Btn_straightLine")
        self.horizontalLayout_7.addWidget(self.Btn_straightLine)
        self.Btn_colorPick = QtWidgets.QPushButton(self.configBar)
        self.Btn_colorPick.setMinimumSize(QtCore.QSize(40, 40))
        self.Btn_colorPick.setMaximumSize(QtCore.QSize(40, 16777215))
        self.Btn_colorPick.setStyleSheet("image: url(:/img/img/drop-silhouette.png);")
        self.Btn_colorPick.setText("")
        self.Btn_colorPick.setObjectName("Btn_colorPick")
        self.horizontalLayout_7.addWidget(self.Btn_colorPick)
        self.Btn_back = QtWidgets.QPushButton(self.configBar)
        self.Btn_back.setMinimumSize(QtCore.QSize(40, 40))
        self.Btn_back.setMaximumSize(QtCore.QSize(40, 40))
        self.Btn_back.setStyleSheet("image: url(:/img/img/refresh.png);")
        self.Btn_back.setText("")
        self.Btn_back.setObjectName("Btn_back")
        self.horizontalLayout_7.addWidget(self.Btn_back)
        self.Btn_save = QtWidgets.QPushButton(self.configBar)
        self.Btn_save.setMinimumSize(QtCore.QSize(40, 40))
        self.Btn_save.setMaximumSize(QtCore.QSize(40, 16777215))
        self.Btn_save.setStyleSheet("image: url(:/img/img/disquete.png);")
        self.Btn_save.setText("")
        self.Btn_save.setObjectName("Btn_save")
        self.horizontalLayout_7.addWidget(self.Btn_save)
        self.Btn_screenshot = QtWidgets.QPushButton(self.configBar)
        self.Btn_screenshot.setMinimumSize(QtCore.QSize(40, 40))
        self.Btn_screenshot.setMaximumSize(QtCore.QSize(40, 16777215))
        self.Btn_screenshot.setStyleSheet("image: url(:/img/img/camara-fotografica.png);")
        self.Btn_screenshot.setText("")
        self.Btn_screenshot.setObjectName("Btn_screenshot")
        self.horizontalLayout_7.addWidget(self.Btn_screenshot)
        self.Btn_openExistingPath = QtWidgets.QPushButton(self.configBar)
        self.Btn_openExistingPath.setMinimumSize(QtCore.QSize(40, 40))
        self.Btn_openExistingPath.setMaximumSize(QtCore.QSize(40, 16777215))
        self.Btn_openExistingPath.setStyleSheet("image: url(:/img/img/mas.png);")
        self.Btn_openExistingPath.setText("")
        self.Btn_openExistingPath.setObjectName("Btn_openExistingPath")
        self.horizontalLayout_7.addWidget(self.Btn_openExistingPath)
        self.verticalLayout_5.addWidget(self.configBar, 0, QtCore.Qt.AlignHCenter)
        self.mats = QtWidgets.QStackedWidget(self.Frame_matDesigner)
        self.mats.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.mats.setStyleSheet("border-top: 2px solid rgb(70,70,70);")
        self.mats.setObjectName("mats")
        self.Frame_mat_replay = QtWidgets.QWidget()
        self.Frame_mat_replay.setAutoFillBackground(False)
        self.Frame_mat_replay.setStyleSheet("border-image: url(:/img/img/pista_replay_img.jpg);\n"
"\n"
"")
        self.Frame_mat_replay.setObjectName("Frame_mat_replay")
        self.mats.addWidget(self.Frame_mat_replay)
        self.verticalLayout_5.addWidget(self.mats)
        self.stackedWidget.addWidget(self.Frame_matDesigner)
        self.settings = QtWidgets.QWidget()
        self.settings.setObjectName("settings")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.settings)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.Frame_settings = QtWidgets.QFrame(self.settings)
        self.Frame_settings.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Frame_settings.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Frame_settings.setObjectName("Frame_settings")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.Frame_settings)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.horizontalLayout_4.addWidget(self.Frame_settings)
        self.stackedWidget.addWidget(self.settings)
        self.graph_maker = QtWidgets.QWidget()
        self.graph_maker.setObjectName("graph_maker")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.graph_maker)
        self.horizontalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_6.setSpacing(0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.frame = QtWidgets.QFrame(self.graph_maker)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(410, 240, 47, 13))
        self.label.setObjectName("label")
        self.horizontalLayout_6.addWidget(self.frame)
        self.stackedWidget.addWidget(self.graph_maker)
        self.horizontalLayout_3.addWidget(self.stackedWidget)
        self.horizontalLayout_2.addWidget(self.ContentFrame)
        self.verticalLayout.addWidget(self.MainFrame)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        self.mats.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.clicksPositions = []
        self.squareClicksPositions = []
        self.globalMX = 0
        self.globalMY = 0
        self.rectsColor = QtGui.QColor.fromRgb(40,40,40)
        self.linesColor = QtGui.QColor.fromRgb(40,40,40)

        self.lastPressedBtn = ""

        self.rects = []




        # SETS UP THE DRAWING EFFECT WHEN CLICKING ON THE MATS
        self.Frame_mat_replay.mousePressEvent = self.mousePressEvent
        self.Frame_mat_replay.paintEvent = self.paintEvent
        self.Frame_mat_replay.mouseMoveEvent = self.mouseMoveEvent
        self.Frame_mat_replay.mouseReleaseEvent = self.mouseReleaseEvent


        # CREATING BUTTONS FUNCTIONALIY

        self.Btn_save.clicked.connect(self.savePath)
        self.Btn_save.setShortcut("Ctrl+S")

        self.Btn_ToggleMenu.clicked.connect(self.toggleMenu)

        self.Btn_back.clicked.connect(self.goBack)
        self.Btn_back.setShortcut("Ctrl+Z")

        self.Btn_square.clicked.connect(self.activateRectDrawing)
        self.Btn_square.setShortcut("Alt+1")

        self.Btn_straightLine.clicked.connect(self.activateLineDrawing)
        self.Btn_straightLine.setShortcut("Alt+2")

        self.Btn_colorPick.clicked.connect(self.colorPicker)

        self.Btn_openExistingPath.clicked.connect(self.openExistingPath)

        self.Btn_screenshot.clicked.connect(self.saveCapture)





        


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Mbarete"))



    # ACITVATE THE SPECIFIC PAINT EVENT FOR THE MAIN FRAME
    def activateRectDrawing(self, event):
        self.lastPressedBtn = "SQUARE"

    def activateLineDrawing(self, event):
        self.lastPressedBtn = "LINE"




    # SETS THE PAINTER OBJECT BASED ON A COLOR -> IMPORTANT -> THIS IS USE TO DRAW ON THE FRAME
    def setPainter(self, color):
        self.painter = QtGui.QPainter()
        self.painter.begin(self.Frame_mat_replay)
        self.pen = QtGui.QPen(color, 7, QtCore.Qt.SolidLine, QtCore.Qt.RoundCap, QtCore.Qt.MiterJoin)

        self.painter.setPen(self.pen)




    # PART OF THE DRAG AND DRAW FUNCTIONALIY FOR DRAWING RECTS
    def mouseReleaseEvent(self, event):

        if self.lastPressedBtn == "SQUARE":
            if len(self.squareClicksPositions) > 0:
                self.rects.append([self.squareClicksPositions[-1][0], self.squareClicksPositions[-1][1], self.globalMX - self.squareClicksPositions[-1][0], self.globalMY - self.squareClicksPositions[-1][1]])



    # THIS IS THE PAINT EVENT ASSOCIATED TO THE MAIN FRAME -> IT'S BASED ON THE lastPressedBtn VARIABLE
    def paintEvent(self, event):

        if self.lastPressedBtn == "SQUARE":
            self.Frame_mat_replay.paintEvent = self.rectDrawing
            self.rectDrawing(self.Frame_mat_replay)


        elif self.lastPressedBtn == "LINE":
            self.Frame_mat_replay.paintEvent = self.lineDrawing
            self.lineDrawing(self.Frame_mat_replay)





    # DRAW BOTH LINES AND RECTS, THIS IS USED TO KEEP DRAWING OLDER SHAPES WHEN NEW SHAPES ARE BEING CREATED
    # THIS MUST BE DONE ANY TIME YOU CHANGE THE PAINT EVENT OBJECT FOR THE MAIN FRAME, OTHERWISE ONLY ALL PAST SHAPES WILL BE DELETED
    # ALL "DRAWINGS" ARE BASED ON AN ARRAY THAT STORES THE COORDENATES FOR THAT SHAPE
    def drawRectsAndLines(self):

        if len(self.rects) > 0:

            self.setPainter(self.rectsColor)
            for rect in range(len(self.rects)):
                self.painter.drawRect(self.rects[rect][0],self.rects[rect][1],self.rects[rect][2],self.rects[rect][3])

            self.painter.end()


        if len(self.clicksPositions) > 1:

            self.setPainter(self.linesColor)
            for click in range(len(self.clicksPositions)-1):
                self.painter.drawLine(self.clicksPositions[click][0],self.clicksPositions[click][1],self.clicksPositions[click+1][0],self.clicksPositions[click+1][1])
            self.painter.end()


    # SET A BUTTON COLOR WHEN IT'S CLICKED
    def setButtonsActiveStates(self):

        if self.lastPressedBtn == "SQUARE":
            self.Btn_square.setStyleSheet("background-color: rgb(70,70,70);\n"
                                          "image: url(:/img/img/dotted-square.png);")
            self.Btn_square.setEnabled(False)


            self.Btn_straightLine.setEnabled(True)
            self.Btn_straightLine.setStyleSheet("background-color: rgb(57,57,57);\n"
                                                "image: url(:/img/img/pair-of-lollipops.png);")

            rectQColor = self.rectsColor.getRgb() 

            rectRgbColor = "rgb" + str((rectQColor[0], rectQColor[1], rectQColor[2])) 


            self.Btn_colorPick.setStyleSheet("QPushButton {\n"
                                               f"background-color: {rectRgbColor};\n"
                                              "image: url(:/img/img/drop-silhouette.png);}")
     

        if self.lastPressedBtn == "LINE":
            self.Btn_straightLine.setStyleSheet("background-color: rgb(70,70,70);\n"
                                          "image: url(:/img/img/pair-of-lollipops.png);")
            self.Btn_straightLine.setEnabled(False)


            self.Btn_square.setEnabled(True)
            self.Btn_square.setStyleSheet("background-color: rgb(57,57,57);\n"
                                          "image: url(:/img/img/dotted-square.png);")


            lineQColor = self.linesColor.getRgb() 

            lineRgbColor = "rgb" + str((lineQColor[0], lineQColor[1], lineQColor[2])) 

            self.Btn_colorPick.setStyleSheet("QPushButton {\n"
                                               f"background-color: {lineRgbColor};\n"
                                              "image: url(:/img/img/drop-silhouette.png);}")


    # ANIMATES THE "DRAG AND DROP" ANIMATION WHEN DRAWIN A RECT - JUST THAT :)
    def rectDrawing(self, event):


        # DRAW RECTANGLE WHEN DRAGING
        self.setButtonsActiveStates()

        self.drawRectsAndLines()

        self.setPainter(self.rectsColor)


        # DRAG ANIMATION WHEN DRAWING RECT
        if len(self.squareClicksPositions) > 0:

            self.painter.drawRect(self.squareClicksPositions[-1][0], self.squareClicksPositions[-1][1], self.globalMX - self.squareClicksPositions[-1][0], self.globalMY - self.squareClicksPositions[-1][1])
        

        self.painter.end()

        self.Frame_mat_replay.update()


        # THIS ALLOWS THE MAIN FRAME TO CHANGE BETWEEN PAINTS EVENTS (RECTDRAWING OR LINEDRAWING)
        self.Frame_mat_replay.paintEvent = self.paintEvent



    # DRAW LINES
    def lineDrawing(self, event):

        self.setButtonsActiveStates()

        self.drawRectsAndLines()

        self.setPainter(self.linesColor)



        if len(self.clicksPositions) > 0:
            self.pen.setWidth(15)
            self.painter.setPen(self.pen)
            self.painter.drawPoint(self.clicksPositions[0][0], self.clicksPositions[0][1])
            self.pen.setWidth(10)
            self.painter.setPen(self.pen)


        if len(self.clicksPositions) > 1:
            for click in range(len(self.clicksPositions)-1):
                self.painter.drawLine(self.clicksPositions[click][0],self.clicksPositions[click][1],self.clicksPositions[click+1][0],self.clicksPositions[click+1][1])


        self.painter.end()
        self.Frame_mat_replay.update()
        self.Frame_mat_replay.paintEvent = self.paintEvent




    def colorPicker(self):
        color = QtWidgets.QColorDialog.getColor()


        if self.lastPressedBtn == "SQUARE":
            self.rectsColor = color

        elif self.lastPressedBtn == "LINE":
            self.linesColor = color



    # UPDATES THE MOUSE POSITIONS VARIABLE
    def mouseMoveEvent(self, event):
        self.globalMX = event.x()
        self.globalMY = event.y()



    # WHENEVER THE FRAME GETS CLICKED, ADD THE CLICK (X,Y) POSITION TO THE RESPECTIVE ARRAY, BASED ON THE PAINT EVENT
    def mousePressEvent(self, event):

        if self.lastPressedBtn == "SQUARE":

            if len(self.squareClicksPositions) > 0:
                self.squareClicksPositions.pop()
            self.squareClicksPositions.append([event.x(), event.y()])


        elif self.lastPressedBtn == "LINE":
            self.clicksPositions.append([event.x(), event.y()])
        

        self.Frame_mat_replay.update()



    # DELETE THE LAST SHAPE 
    def goBack(self):

        if self.lastPressedBtn == "SQUARE":

            if len(self.squareClicksPositions) > 0:
                self.squareClicksPositions.pop()

            if len(self.rects) > 0:
                self.rects.pop()
                self.Frame_mat_replay.update()



        if self.lastPressedBtn == "LINE":

            if len(self.clicksPositions) > 0:
                self.clicksPositions.pop()
                self.Frame_mat_replay.update()




    # ASK FOR THE DIRECTORY AND SAVE THE CURRENT PATH (ONLY LINES ARE TAKING INTO ACCOUNG WHEN DEFINIG A "PATH") 
    # ALL LINES ARE CONSIDERED AS THE PATH
    def savePath(self):

        realRobotCoordenates = []

        winWidth, winHeight = MainWindow.width(), MainWindow.height()

        for line in self.clicksPositions:
            realRobotCoordenates.append([round(200/(MainWindow.width()/line[0])), round(130/(MainWindow.height()/(MainWindow.height()-line[1])))])


        buttonReply = QtWidgets.QMessageBox.question(MainWindow, "Mbarete...", "Would you also like to save a capture?")
        path = QtWidgets.QFileDialog.getSaveFileName(MainWindow, "Select Directory", os.getcwd(),"Mbarete files (*.mbarete)")

        try:
            with open(path[0], "wb") as file:

                pickle.dump(self.clicksPositions, file)
                pickle.dump(realRobotCoordenates, file)

                print("\n---------------------------------")
                print("Successfully saved binary file")



        except:
            print("Fail to save binary file")


    # OPEN AN EXISTING PATH (*.mbarete) AND DRAW THAT PATH ON THE MAIN FRAME
    def openExistingPath(self):

        path = QtWidgets.QFileDialog.getOpenFileName(MainWindow, "Select File", os.getcwd(),"Mbarete files (*.mbarete)")
        path_data = []

        with open(path[0], "rb") as f:

            for _ in range(2):
                path_data.append(pickle.load(f))

            

        self.clicksPositions = path_data[0]

        self.lastPressedBtn = "LINE"
        self.lineDrawing(self.Frame_mat_replay)


    # TAKES A SCREENSHOT
    def saveCapture(self):

        path = QtWidgets.QFileDialog.getSaveFileName(MainWindow, "Select Directory", os.getcwd(),"Image files (*.png)")

        try:

            screen = QtWidgets.QApplication.primaryScreen()
            screenshot = screen.grabWindow(self.Frame_mat_replay.winId())
            screenshot.save(path[0], 'png')



        except:
            print("Fail to save capture")


    # TOOGLE MENU EFFECT 
    def toggleMenu(self):

        width = self.LeftBar.width()
        maxExtend = 180
        standard = 60

        if width == 60:
            widthExtended = maxExtend
        else:
            widthExtended = standard

        # ANIMATION
        self.animation = QtCore.QPropertyAnimation(self.LeftBar, b"minimumWidth")
        self.animation.setDuration(400)
        self.animation.setStartValue(width)
        self.animation.setEndValue(widthExtended)
        self.animation.setEasingCurve(QtCore.QEasingCurve.InOutQuart)
        self.animation.start()





import resources_rc




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())


